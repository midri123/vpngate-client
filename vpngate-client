#!/usr/bin/env python3

import argparse
import base64
import concurrent.futures
import csv
import io
import logging
import os
import signal
import socket
import subprocess
import sys
import tempfile
import time
import urllib.request

# The URL for the VPN list
VPN_LIST_URL = "https://www.vpngate.net/api/iphone/"
SPEED_TEST_URL = "https://cachefly.cachefly.net/10mb.test"

logger = logging.getLogger()

# sigwait() does not work unless the signals waited have a handler defined
# (default handler terminates the program).
signal.signal(signal.SIGUSR1, lambda a: a)


EU_COUNTRIES = ["AL", "AT", "BA", "BE", "BG", "CH", "CY", "DE", "DK", "EE",
                "ES", "FI", "FR", "GB", "GR", "HR", "HU", "IE", "IS", "IT",
                "LT", "LV", "MK", "MT", "NL", "NO", "PL", "PT", "RO", "RS",
                "SE", "SI"]

# Commands for guarding IPv4 traffic against non-VPN leakage
IPv4_COMMANDS = [
    # accept connections to loopback device
    ["iptables", "--append", "INPUT",
                 "--in-interface", "lo",
                 "--jump", "ACCEPT"],

    # accept connections from loopback device
    ["iptables", "--append", "OUTPUT",
                 "--out-interface", "lo",
                 "--jump", "ACCEPT"],

    # allow outbound broadcasts for dhcp traffic
    ["iptables", "--append", "OUTPUT",
                 "--destination", "255.255.255.255",
                 "--jump", "ACCEPT"],

    # allow inbound broadcasts for dhcp traffic
    ["iptables", "--append", "INPUT",
                 "--source", "255.255.255.255",
                 "--jump", "ACCEPT"],

    # allow inbound traffic from local network
    ["iptables", "--append", "INPUT",
                 "--source", "192.168.0.0/16",
                 "--destination", "192.168.0.0/16",
                 "--jump", "ACCEPT"],

    # allow outbound traffic to local network
    ["iptables", "--append", "OUTPUT",
                 "--source", "192.168.0.0/16",
                 "--destination", "192.168.0.0/16",
                 "--jump", "ACCEPT"],

    # allow packets to be forwarded from tun0 to other interfaces
    ["iptables", "--append", "FORWARD",
                 "--out-interface", "tun+",
                 "--jump", "ACCEPT"],

    # allow packets to be forwarded from any interface to tun0
    ["iptables", "--append", "FORWARD",
                 "--in-interface", "tun+",
                 "--jump", "ACCEPT"],

    # handle nated packets correctly
    ["iptables", "--table", "nat",
                 "--append", "POSTROUTING",
                 "--out-interface", "tun+",
                 "--jump", "MASQUERADE"],

    # drop packets not going to the VPN IP
    ["iptables", "--append", "OUTPUT",
                 "!", "--out-interface", "tun+",
                 "!", "--destination", "<IP>",
                 "--jump", "DROP"],
]

# Commands for blocking all ipv6 traffic; the VPNs don't support the
# protocol.
IPv6_COMMANDS = [
    # drop inbound ipv6 packets
    ["ip6tables", "-P", "INPUT", "DROP"],

    # drop outbound ipv6 packets
    ["ip6tables", "-P", "OUTPUT", "DROP"],

    # drop forwarded ipv6 packets
    ["ip6tables", "-P", "FORWARD", "DROP"],
]


class VPN:
    """A VPN server."""

    def __init__(self, data, args):
        # Command Line Arguments
        self.args = args

        # Logging
        self.log = logging.getLogger("VPN:%s" % data["#HostName"])

        # VPN Information
        self.ip = data["IP"]
        self.country = data["CountryLong"]
        self.country_code = data["CountryShort"]

        # OpenVPN endpoint information
        self.proto = None
        self.port = None

        # OpenVPN Config
        conf = data["OpenVPN_ConfigData_Base64"]
        self.config = base64.b64decode(conf).decode("UTF-8")
        for line in self.config.splitlines():
            if line.startswith("remote"):
                # format: remote <ip> <port>
                _, ip, self.port = line.split(" ")

                # If the IP is different, something is not right.
                assert not self.ip or ip == self.ip

                # If the IP was not provided, use this one found here.
                self.ip = ip

            elif line.startswith("proto"):
                # format: proto tcp|udp
                _, self.proto = line.split(" ")

        self.log.debug("New VPN: ip=%s, proto=%s port=%s country=%s (%s)",
                       self.ip, self.proto, self.port, self.country,
                       self.country_code)

    def is_listening(self):
        """Probes the VPN endpoint to see if it's listening."""
        if self.proto == "udp":
            # TODO: Implement udp probing.
            self.log.debug("Can't probe UDP servers")
            return True

        self.log.debug("Probing VPN endpoint")

        # Create a socket with a timeout.
        s = socket.socket()
        s.settimeout(self.args.probe_timeout / 1000)

        try:
            # Try to connect to the VPN endpoint.
            s.connect((self.ip, int(self.port)))
            s.shutdown(socket.SHUT_RDWR)
            s.close()
        except socket.timeout:
            self.log.debug("VPN endpoint did not respond to connection")
            return False
        except (ConnectionRefusedError, OSError):
            self.log.debug("Connection failed")
            return False

        self.log.debug("VPN endpoint is listening")
        return True

    def connect(self):
        """Initiates and manages the connection to this VPN server.

        Returns:
            (boolean) True if the connection was established and used, False if
            the connection failed and the next server should be tried

        Throws:
            (KeyboardInterrupt) if the process was aborted by the user.
        """

        self.log.info("Connecting to VPN...")
        with tempfile.NamedTemporaryFile(mode="w") as conf:
            self.log.debug("Writing config to %s", conf.name)
            conf.write(self.config)

            cmd = self.build_ovpn_command(conf.name)

            self.log.debug("Executing %s", cmd)
            with subprocess.Popen(cmd, start_new_session=True) as proc:
                # Wait for the VPN to initialize
                if not self.wait_for_vpn_ready(proc):
                    # VPN failed to initialize. Indicate the caller to try the
                    # next one.
                    return False

                # Perform a speedtest on the VPN
                self.speedtest()

                # Ask the user if she wishes to use this VPN.
                if not self.prompt_use_vpn():
                    self.terminate_vpn(proc)
                    return False

                self.log.info("Setup finished! Press CTRL+C to stop the VPN")

                if self.args.iptables:
                    self.setup_iptables_rules()

                # Wait for SIGINT indefinitely.
                signal.sigwait(set([signal.SIGINT]))

                if self.args.iptables:
                    self.clear_iptables_rules()
                self.log.info("Closing VPN connection.")
                self.terminate_vpn(proc)

            return True

    def build_ovpn_command(self, conffile):
        """Builds the openvpn command to connect to this VPN."""
        # Make openvpn send USR1 on VPN up and USR2 on VPN down
        pid = os.getpid()
        up = "/bin/kill -USR1 %i" % pid

        command = [
            "openvpn",
            "--script-security", "2",
            "--route-up", up
        ]

        # Only use 'update-resolv-conf' in '--up' and '--down' if really exists on filesystem.
        if os.path.isfile("/etc/openvpn/update-resolv-conf"):
            command.extend([
                "--up", "/etc/openvpn/update-resolv-conf",
                "--down", "/etc/openvpn/update-resolv-conf"
            ])

        command.extend(["--config", conffile])

        return command

    def wait_for_vpn_ready(self, proc):
        """Waits until the VPN routes have been correctly set and the VPN is
           ready to be used.

        Arguments:
            (Popen) proc: The Popen object for the openvpn process.

        Returns:
            (boolean) True if the route is setup correctly and the VPN is ready
            to be used, False if the initialization timed out.

        Throws:
            (KeyboardInterrupt) if the process was aborted by the user.
        """

        # Wait for SIGUSR1 and SIGINT; if we did not wait for SIGINT, this
        # process would hang indefinitely if SIGINT is generated.
        sigs = set([signal.SIGUSR1, signal.SIGINT])

        sig = None
        total_wait = 0
        while not sig and total_wait < self.args.vpn_timeout:
            # Check if the process died
            if proc.poll() is not None:
                # Process is dead. Something went wrong.
                self.log.warning("VPN initialization failed.")
                return False

            sig = signal.sigtimedwait(sigs, self.args.vpn_timeout_poll_interval)
            total_wait += self.args.vpn_timeout_poll_interval

        if not sig:
            self.log.warning("VPN Initialization timed out.")
            self.terminate_vpn(proc)
            return False

        elif sig.si_signo == signal.SIGINT:
            self.log.info("Received SIGINT. Cleaning up...")
            self.terminate_vpn(proc)

            # sigtimedwait() supressed the interrupt; raise it to let the rest
            # of the program know the user wants out.
            raise KeyboardInterrupt

        else:
            # Sanity check
            assert sig.si_signo == signal.SIGUSR1

            # Got USR1 which marks that the VPN routes are up.
            self.log.info("VPN initialized!")

            return True

    def prompt_use_vpn(self):
        """Asks the user if she likes to continue using the VPN connection
           after speedtest.

            Returns:
                (boolean) True if the users wants to use this VPN, False if not

        """

        self.log.info("Would you like to use this VPN (No = CTRL+C, " +
                      "Yes = Any Key)?")

        return True

    def terminate_vpn(self, proc):
        """Terminates the given vpn process gracefully (or forcefully if the
           termination takes too long).

        Arguments:
            (Popen) proc: The Popen object for the openvpn process.
        """
        def terminated():
            """Checks if the process terminates in 5 seconds."""
            try:
                proc.wait(timeout=5)
            except subprocess.TimeoutExpired:
                return False

            return True

        self.log.info("Terminating VPN connection")
        proc.terminate()
        if not terminated():
            self.warning("Termination timed out. Killing the process.")
            proc.kill()
            if not terminated():
                self.log.critical("The VPN process can't be killed!")
                self.log.critical("Exiting...")
                sys.exit(1)

    def speedtest(self):
        """Performs a speed test on the VPN connection."""

        self.log.info("Performing connection speed test. Press CTRL+C to " +
                      "stop it.")
        try:
            speedtest()
        except KeyboardInterrupt:
            print("")

    def setup_iptables_rules(self):
        """Sets up iptables rules for blocking traffic that's not going
        through the VPN. Useful to stop traffic leaking if the VPN disconnects
        for some reason.
        """

        self.log.info("Setting iptables rules to block non-VPN traffic")

        for cmd in IPv4_COMMANDS + IPv6_COMMANDS:
            if "<IP>" in cmd:
                cmd[cmd.index("<IP>")] = self.ip

            if not check_call_infallible(cmd):
                self.logging.exception("Failed to setup iptables; rolling " +
                                       "back changes")
                self.clear_iptables_rules()
                return

    def clear_iptables_rules(self):
        """Clears iptables rules set by the setup_iptables_rules method."""

        self.log.info("Clearing iptables rules")

        # list() so that we don't modify the original list
        for cmd in list(IPv4_COMMANDS):
            # Replace the --append with --delete in the setup commands
            cmd[cmd.index("--append")] = "--delete"
            if "<IP>" in cmd:
                cmd[cmd.index("<IP>")] = self.ip

            if not check_call_infallible(cmd):
                self.logging.exception("Failed to call iptables; continuing " +
                                       "cleanup anyway")

        for cmd in list(IPv6_COMMANDS):
            # Replace DROP with ACCEPT to reverse the original action
            cmd[cmd.index("DROP")] = "ACCEPT"

            if not check_call_infallible(cmd):
                self.logging.exception("Failed to call ip6tables; continuing" +
                                       " cleanup anyway")

    def __str__(self):
        return "VPN(ip=%s, country=%s)" % (self.ip, self.country)


class FileVPN(VPN):
    """A VPN whose config is read directly from an .openvpn file"""

    def __init__(self, args):
        conf = args.ovpnfile.read()
        b64conf = base64.b64encode(conf)

        data = {
            "IP": None,
            "CountryLong": "Unknown",
            "CountryShort": "Unknown",
            "#HostName": args.ovpnfile.name,
            "OpenVPN_ConfigData_Base64": b64conf
        }

        super().__init__(data, args)


def check_call_infallible(cmd):
    """Calls subprocess.check_call() and returns False if the process exits
       with non-zero exit code instead of throwing CalledProcessException

       Arguments:
           (Array) cmd - The command to execute.

       Returns:
           (boolean) True if command succeeded, False otherwise.
    """
    try:
        subprocess.check_call(cmd)
    except subprocess.CalledProcessException:
        return False
    return True


class VPNList:
    def __init__(self, args):
        self.args = args

        # Setup logging
        self.log = logging.getLogger("VPNList")

        # Fetch the list
        self.load_vpns()

        # Filter by country
        self.filter_by_country()

        # Filter out unresponsive servers
        self.filter_unresponsive_vpns()

    def load_vpns(self):
        """Loads the VPN list from vpngate.net and parses then to |self.vpns|.
        """
        self.log.info("Loading VPN list from %s", self.args.url)

        # Read the data
        req = urllib.request.urlopen(self.args.url)
        data = io.TextIOWrapper(req, encoding='utf8')

        # The first and last lines start with an asterix; ignore them
        rows = filter(lambda r: not r.startswith("*"), data)

        # Parse the CSV
        reader = csv.DictReader(rows)

        # Create VPN instances
        self.vpns = [VPN(row, self.args) for row in reader]
        self.log.info("Found %i VPN servers", len(self.vpns))

    def filter_by_country(self):
        """Filters the VPN list based on geographic information."""
        # Check if anything needs to be filtered

        filters = []

        if self.args.eu:
            self.log.info("Including VPNs in Europe")
            filters.append(lambda vpn: vpn.country_code in EU_COUNTRIES)

        if self.args.us:
            self.log.info("Including VPNs in USA")
            filters.append(lambda vpn: vpn.country_code == "US")

        if self.args.country:
            countries = set(map(str.upper, self.args.country))
            self.log.info("Including VPNs in %s", countries)
            filters.append(lambda vpn: vpn.country_code in countries)

        if filters:
            filter_fn = lambda vpn: any(f(vpn) for f in filters)
            self.vpns = list(filter(filter_fn, self.vpns))
            self.log.info("Found %i VPN servers matching the geographic " +
                          "restrictions", len(self.vpns))

    def filter_unresponsive_vpns(self):
        """Probes VPN servers listening on TCP ports and removes those who do
           not reply in timely manner from the list of available VPNs.
        """
        self.log.info("Filtering out unresponsive VPN servers")

        # The number of concurrent probes
        n = args.probes

        # Parallelize the probing to a thread pool
        with concurrent.futures.ThreadPoolExecutor(max_workers=n) as ex:
            futures = {ex.submit(vpn.is_listening): vpn for vpn in self.vpns}
            responding = []

            for future in concurrent.futures.as_completed(futures):
                vpn = futures[future]

                try:
                    # True if the VPN responded, False otherwise
                    if future.result():
                        responding.append(vpn)

                except:
                    self.log.exception("Availability probe failed")

        self.log.info("Found %i responding VPNs", len(responding))

        self.vpns = responding


def speedtest():
    """Performs a speedtest printing connection speeds in kb/s once every
       500ms.
    """
    req = urllib.request.urlopen(SPEED_TEST_URL)

    # Bytes since previous checkpoint
    bytes_read = 0

    # Previous moment the speed was calculated (seconds)
    prev_checkpoint = time.perf_counter()

    # Size of the chunks to read.
    chunk = 4096
    while 1:
        # Read the next chunk
        data = req.read(chunk)
        bytes_read += chunk

        if not data:
            break

        # See how long since last checkpoint
        delta_t = time.perf_counter() - prev_checkpoint

        if delta_t > 0.5:
            # Yield the current speed.
            kbps = bytes_read / delta_t / 1024
            print("Current Speed: % 5.1f kb/s" % kbps, end="\r")
            bytes_read = 0
            prev_checkpoint = time.perf_counter()


def parse_args():
    """Parses the command line arguments."""
    p = argparse.ArgumentParser(description="Client for vpngate.net VPNs")
    p.add_argument("--country", "-c", action="append",
                   help="A 2 char country code (e.g. CA for Canada) from " +
                        "which to look for a VPNs. If specified multiple " +
                        "times, VPNs from all the countries will be selected.")
    p.add_argument("--eu", action="store_true",
                   help="Adds European countries to the list of considerable" +
                        " countries")
    p.add_argument("--iptables", "-i", action="store_true",
                   help="Set iptables rules that block non-VPN traffic. " +
                        "WARNING: This option messes IPv6 iptables up!")
    p.add_argument("--probes", action="store", default=100, type=int,
                   help="Number of concurrent connection probes to send.")
    p.add_argument("--probe-timeout", action="store", default=1500, type=int,
                   help="When probing, how long to wait for " +
                        "connection until marking the VPN as unavailable " +
                        "(milliseconds)")
    p.add_argument("--url", action="store", default=VPN_LIST_URL,
                   help="URL of the VPN list (csv)")
    p.add_argument("--us", action="store_true",
                   help="Adds United States to the list of possible " +
                        "countries. Shorthand or --country US")
    p.add_argument("--verbose", "-v", action="store_true",
                   help="More verbose output")
    p.add_argument("--vpn-timeout", action="store", default=10, type=int,
                   help="Time to wait for a VPN to be established " +
                        "before giving up (seconds).")
    p.add_argument("--vpn-timeout-poll-interval", action="store", default=1, type=int,
                   help="Time between two checks for a potential timeout (seconds)")
    p.add_argument("ovpnfile", type=argparse.FileType('rb'), default=None,
                   nargs="?",
                   help="Connects to the OpenVPN VPN whose configuration is " +
                        "in the provided .ovpn file")
    return p.parse_args()


def single_vpn_main(args):
    """Connects to the VPN is the given .ovpn file."""
    vpn = FileVPN(args)
    try:
        vpn.connect()
    except KeyboardInterrupt:
        logging.error("Aborted")


def vpn_list_main(args):
    """Fetches list of VPNs and connects to them."""

    vpnlist = VPNList(args)

    # Connect to them one-by-one and let the user decide which one to use.
    for vpn in vpnlist.vpns:
        logging.info("Connecting to %s (%s)", vpn, vpn.country)
        try:
            res = vpn.connect()
        except KeyboardInterrupt:
            break

        # The user was happy with this VPN, break the loop.
        if res:
            break

    logger.info("Exiting...")


def main(args):
    if args.ovpnfile:
        # Load a single VPN from the given file.
        return single_vpn_main(args)
    else:
        # Load list and try them in order
        return vpn_list_main(args)

if __name__ == "__main__":
    args = parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    sys.exit(main(args))
